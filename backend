# backend/app.py
from flask import Flask, request, jsonify
from flask_cors import CORS
from pymongo import MongoClient
import bcrypt
import jwt
import datetime
from functools import wraps

app = Flask(__name__)
CORS(app, origins=["*"])  # You can replace "*" with your frontend URL in production

SECRET_KEY = "supersecret123"  # Change this for production!

# MongoDB setup
client = MongoClient("mongodb://127.0.0.1:27017/")
db = client["gaming_site"]
users = db["users"]

# ---------------- Helper: Token Required ---------------- #
def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = request.headers.get("x-access-token")
        if not token:
            return jsonify({"message": "Token is missing!"}), 401
        try:
            data = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
            current_user = users.find_one({"username": data["username"]})
            if not current_user:
                return jsonify({"message": "User not found!"}), 401
        except:
            return jsonify({"message": "Token is invalid!"}), 401
        return f(current_user, *args, **kwargs)
    return decorated

# ---------------- REGISTER ---------------- #
@app.route("/register", methods=["POST"])
def register():
    data = request.json
    username = data.get("username")
    password = data.get("password")
    confirm_password = data.get("confirmPassword")

    if not username or not password or not confirm_password:
        return jsonify({"message": "All fields required"}), 400
    if password != confirm_password:
        return jsonify({"message": "Passwords do not match"}), 400
    if len(password) < 8:
        return jsonify({"message": "Password must be at least 8 characters"}), 400
    if users.find_one({"username": username}):
        return jsonify({"message": "User already exists"}), 409

    hashed = bcrypt.hashpw(password.encode("utf-8"), bcrypt.gensalt())
    users.insert_one({"username": username, "passwordHash": hashed.decode("utf-8")})
    return jsonify({"message": "âœ… User registered successfully!"})

# ---------------- LOGIN ---------------- #
@app.route("/login", methods=["POST"])
def login():
    data = request.json
    username = data.get("username")
    password = data.get("password")

    user = users.find_one({"username": username})
    if not user:
        return jsonify({"message": "Invalid username or password"}), 401

    password_hash = user["passwordHash"].encode("utf-8")
    if not bcrypt.checkpw(password.encode("utf-8"), password_hash):
        return jsonify({"message": "Invalid username or password"}), 401

    token = jwt.encode(
        {"username": username, "exp": datetime.datetime.utcnow() + datetime.timedelta(hours=2)},
        SECRET_KEY,
        algorithm="HS256"
    )
    return jsonify({"message": "ðŸŽ® Login successful!", "token": token})

# ---------------- PROTECTED ROUTE ---------------- #
@app.route("/profile", methods=["GET"])
@token_required
def profile(current_user):
    return jsonify({"message": f"Welcome {current_user['username']}! This is your profile."})

# ---------------- MAIN ---------------- #
if __name__ == "__main__":
    app.run(port=5000, debug=True)
